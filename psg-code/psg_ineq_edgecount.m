function edgecount=psg_ineq_edgecount(partitions,if_log)
% edgecount=psg_ineq_edgecount(partitions,if_log) tallies and optionally
% displays the number of ones in a 3 x 3 x 3 ... x 3 array for each number
% of dimensions that have the value 2
%
% partitions: an array of size 3 x 3 x 3 ... x 3 of 1's and 0's, typically 
%   generated by psg_ineq_logic
% if_log: 1 to log, 0 if omitted
%
% egdgecount(k+1) is the number of elements of partitions equal to 1 that have a coordinate of 2 on k of the dimensions
%
%   See also: PSG_INEQ_LOGIC, PSG_INEQ_LOGIC_DEMO.
%
if (nargin<=1)
    if_log=0;
end
nc=ndims(partitions);
if size(partitions,2)==1
    nc=1;
end
%
%create a template of the number of edges in each location to use as a mask
%
z=[0 1 0];
for k=2:nc
    z=[z z+1 z];
end
edgecount=zeros(1,nc+1);
for k=0:nc
    edgecount(k+1)=sum(partitions(:).*double(z(:)==k));
end
if (if_log)
    for k=0:nc
        disp(sprintf('subsets involving %2.0f edges: masked %8.0f                   unmasked %8.0f    total %8.0f',...
            k,edgecount(k+1),sum((1-partitions(:)).*double(z(:)==k)),sum(double(z(:)==k))));
    end
    disp(sprintf('                     total: masked %8.0f (check: %8.0f) unmasked %8.0f    total %8.0f',...
        sum(partitions(:)),sum(edgecount),sum(partitions(:)==0),prod(size(partitions))));
end
return
