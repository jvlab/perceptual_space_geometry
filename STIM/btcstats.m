function [statvec,blockcounts]=btcstats(binmap,btc_dict)
%
% [statvec,blockcounts]=btcstats(binmap,btc_dict) computes 2x2 binary image statistics in standard order from a binary map
%
% input
%    binmap, a 2d array of 0's and 1's
%    btc_dict: a structure that defines the statistcs, generated by btc_define.
%      if omitted it will be computed, but precomputing is faster if btcstats is called multiple times
% output:
%    statvec is a 10-vector, consiting of:
%       gamma, beta_h, beta_v, beta_NESW, beta_NWSE, thetas, alpha
%        the thetas are in the order
%          t     u     v     w
%          X     X     XX    XX
%         XX     XX    X      X
%    blockcounts is a count of the 16 unique block types
%
%  code adapted from mlis_btcstats
%
% 25Dec20:  add blockounts as output
%
%   See also:  BTCSTATS_DEMO, BTC_DEFINE, FILLDEFAULT, BTC_CORRS2VEC, GETCORRS_P2X2, GLIDER_MAPUBI, NARY2INT.
%
if (nargin<=1)
    btc_dict=btc_define;
end
btc_ng=2; %number of gray levels
btc_checkdef=[0 0;0 1;1 0;1 1]; %defines the checks in a neighborhood
btc_reshape=repmat(btc_ng,1,size(btc_checkdef,1)); %typically, [2 2 2 2];
%
blockcounts=glider_mapubi(binmap,btc_checkdef,btc_ng,setfield([],'mapubi_bc',0)); %NON-periodic boundary conditions
p2x2=reshape(blockcounts,btc_reshape)/sum(blockcounts(:)); %block counts to probabilities
nowarn=1; %getcorrs_p2x2 doesn't need to warn if probabilities <0
justbtc=1; %only need to calcluate correlations, not cig params and entropies
statvec=btc_corrs2vec(getcorrs_p2x2(p2x2,nowarn,justbtc),btc_dict); %probabilities to statistics
%
return
end
