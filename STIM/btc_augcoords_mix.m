function [vec_mix,letcode_mix,augcoords_mix,vecs]=btc_augcoords_mix(specs,dict,aug_opts);
% [vec_mix,letcode_mix,augcoords_mix,vecs]=btc_augcoords_mix(specs,dict,aug_opts) determines
% the coordinates of a mixture of textures corresponding to specs
%
% specs: a cell array of spec, a structure of up to 10 fields, chosen from the code letters gbcdetuvwa,
%    indicating the pairwise coordinates of the mixtures to be combined
%    Each of these is augmented by btc_augcoords, and the results added.
% dict:  dictionary of binary correlation names, generated by btc_define;
%    btc_define called if this field is empty or absent
% aug_opts:  a field of options
%   aug_opts.ifstd: 1 if dict is the standard one (saves recomputing)
% aug_opts.nocheck: %don't call getcorrs_p2x2
%   (so normalization is not checked, but assumed valid)
%
% vec_mix: the vector of coordinates
% letcode_mix: the structure of coordinates
% augcoords_mix:  a cell array of the results returned by btc_augcoords
% augcoords_mix{k}.dict: dictionary used
% augcoords_mix{k}.method{:}: a cell array of methods used
%    auggoords_mix{k}.method{:}.name={Pickard | DiagMRF | NoPickTT | NoPickBT}
%      Pickard:   Markov propagation in 2x2 block (most rules)
%      DiagMRF:   Markov propagation in checkerboard-interleaved diagonal sublattices (both diagonal betas)
%      NoPickTT: Markov propagation in 2x2 block, followed by Metropolis
%        for thetas overlapping on an edge, since Markov propagation induces next-nearest-neighbor correls
%      NoPickBT: Markov propagation in a T, followed by Metropolis for theta and beta coming from angle,
%        T-propagation induces beta*theta of the opposite theta, and theta*beta^2 across the top of the T
%    Pickard variant 1 must be generated from NW(A) to SE(D); flankers of A and D pixels are conditionally indep of A and D
%    Pickard variant 2 must be generated from NE(B) to SW C); flankers of B and C pixels are conditionally indep of B and C.
% vecs(length(specs),:): the vectors of the individual components
%
%    See also: BTC_DEFINE, BTC_TEST, GETP2X2_ATG, GETCORRS_P2X2, GETP2X2_CORRS, BTC_MEABB, BTC_MEABT, BTC_PAIRVERIFY, 
%        BTC_AUGCOORDS, TEXRES_SETUP, TEXRES_MAKE.
%
if (nargin<2)
    dict=btc_define;
    aug_opts.ifstd=1;
end
if (nargin<3)
    aug_opts=[];
end
if (isempty(dict))
    dict=btc_define;
    aug_opts.ifstd=1;
end
%
vec_mix=zeros(1,length(dict.codel));
nmix=length(specs);
for imix=1:nmix
    augcoords_mix{imix}=btc_augcoords(specs{imix},dict,aug_opts);
    vec=augcoords_mix{imix}.method{1}.vec;
    vecs(imix,:)=vec;
    vec_mix=vec_mix+vec;  
end
vec_mix=vec_mix/nmix;
letcode_mix=btc_vec2letcode(vec_mix,dict);
return
